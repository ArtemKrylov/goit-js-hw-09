{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,IAAIC,EAAe,CACjBC,MAAO,KACPC,KAAM,KACNC,OAAQ,MAEV,MAAMC,EAAcC,SAASC,cAAc,SAwG3C,SAASC,EAAcC,EAAUP,GAC/B,MAAMQ,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,GAEFM,QAAQC,IAAI,QAAS,C,SAAER,E,MAAUP,IACjCgB,YAAW,IAAMJ,EAAQ,C,SAAEL,E,MAAUP,KAAUA,KAG/Cc,QAAQC,IAAI,SAAU,C,SAAER,E,MAAUP,IAClCgB,YAAW,IAAMH,EAAO,C,SAAEN,E,MAAUP,KAAUA,GAChD,GAEJ,EAzDA,WACE,IAAKD,GAAqD,IAArCkB,OAAOC,KAAKnB,GAAcoB,OAAc,OAE7D,IAAIC,EACJ,IACEA,EAAqBC,KAAKC,MAAMC,aAAaC,QAAQ,gBAIvD,CAHE,MAAOC,GAEP,YADAX,QAAQW,MAAMA,EAEhB,CACA1B,EAAeqB,GAA0CrB,EAEzDkB,OAAOC,KAAKnB,GAAc2B,SACxBC,GAAQxB,EAAYyB,SAASD,GAAKE,MAAQ9B,EAAa4B,IAE3D,CAxEAG,GAEA3B,EAAY4B,iBAAiB,UAG7B,UAAkCC,OAAEA,IAClCjC,EAAaiC,EAAOC,MAAQC,SAASF,EAAOH,OAkC9C,SAA6BM,GAC3B,IACEZ,aAAaa,QAAQ,eAAgBf,KAAKgB,UAAUF,GAGtD,CAFE,MAAOV,GACPX,QAAQW,MAAMA,EAChB,CACF,CAvCEa,CAAoBvC,EACtB,IALAI,EAAY4B,iBAAiB,UAO7B,SAAgCQ,GAE9B,GADAA,EAAMC,kBAgER,WACE,IAAIC,GAAS,EAQb,OAPAxB,OAAOC,KAAKnB,GAAc2B,SAAQC,MAC3Be,QAAQ3C,EAAa4B,KAAS5B,EAAa4B,GAAO,KAWzDxB,EAVmBwB,GAUIgB,MAAMC,QAAU,gBATnCH,GAAS,EACX,IAGKA,CACT,CAzEOI,GAEH,YADAhD,EAAAiD,OAAOC,QAAQ,+BAiFjB,IAAI5C,EAAYyB,UAAUF,SAAQsB,IACZ,UAAhBA,EAAGC,WACLD,EAAGL,MAAMC,QAAU,WA/CvBrB,aAAa2B,WAAW,gBAIxB/C,EAAYgD,QAhCZ,IAAIC,EAAUrD,EAAaG,OAASH,EAAaE,KAAOF,EAAaC,MACrEoD,EAAUA,EAAU,IAAO,IAAOA,EAClCvD,EAAAiD,OAAOO,KAAK,CACVD,QAASA,IAGX,IAAK,IAAIE,EAAI,EAAGA,EAAIvD,EAAaG,SAAUoD,EAAG,CAE5ChD,EAAcgD,EAAI,EADJvD,EAAaC,MAAQD,EAAaE,KAAOqD,GAEpDC,MAAK,EAAChD,SAAEA,EAAQP,MAAEA,MACjBH,EAAAiD,OAAOU,QAAQ,uBAAuBjD,QAAeP,MAAS,IAE/DyD,OAAM,EAAClD,SAAEA,EAAQP,MAAEA,MAClBH,EAAAiD,OAAOC,QAAQ,sBAAsBxC,QAAeP,MAAS,GAEnE,CACF","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nlet promiseSetup = {\n  delay: null,\n  step: null,\n  amount: null,\n};\nconst promiseForm = document.querySelector('.form');\n\n//set inputs` values from localStorage\nsetInputsFromLocalStorage();\n\npromiseForm.addEventListener('change', onPromiseFormInputChange);\npromiseForm.addEventListener('submit', onPromiseFormBtnSubmit);\n\nfunction onPromiseFormInputChange({ target }) {\n  promiseSetup[target.name] = parseInt(target.value);\n  writeToLocalStorage(promiseSetup);\n}\n\nfunction onPromiseFormBtnSubmit(event) {\n  event.preventDefault();\n  if (!checkInputs()) {\n    Notify.failure('Enter all inputs correctly!');\n    return;\n  }\n  removeAllRedOutlines();\n  clearLocalStorage();\n  clearInputFields();\n  //set notify messages` timeout so they don`t hide while all Promises are resolved/rejected\n  //timeout can`t be less than 5 seconds\n  let timeout = promiseSetup.amount * promiseSetup.step + promiseSetup.delay;\n  timeout = timeout < 5000 ? 5000 : timeout;\n  Notify.init({\n    timeout: timeout,\n  });\n\n  for (let i = 0; i < promiseSetup.amount; ++i) {\n    const delay = promiseSetup.delay + promiseSetup.step * i;\n    createPromise(i + 1, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\n//writes data from inputs to localStorage\nfunction writeToLocalStorage(obj) {\n  try {\n    localStorage.setItem('promiseSetup', JSON.stringify(obj));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction clearLocalStorage() {\n  localStorage.removeItem('promiseSetup');\n}\n\nfunction clearInputFields() {\n  promiseForm.reset();\n}\n\n//reads data from localStorage and updates promiseSetup obj\nfunction setInputsFromLocalStorage() {\n  if (!promiseSetup || Object.keys(promiseSetup).length === 0) return;\n\n  let promiseSetupParsed;\n  try {\n    promiseSetupParsed = JSON.parse(localStorage.getItem('promiseSetup'));\n  } catch (error) {\n    console.error(error);\n    return;\n  }\n  promiseSetup = promiseSetupParsed ? promiseSetupParsed : promiseSetup;\n\n  Object.keys(promiseSetup).forEach(\n    key => (promiseForm.elements[key].value = promiseSetup[key])\n  );\n}\n\n//checks if all inputs are made and all are correct (digits above zero)\nfunction checkInputs() {\n  let passed = true;\n  Object.keys(promiseSetup).forEach(key => {\n    if (!Boolean(promiseSetup[key]) || promiseSetup[key] < 0) {\n      showWrongInput(key);\n      passed = false;\n    }\n  });\n\n  return passed;\n}\n\n//adds red outline to wrong input field\nfunction showWrongInput(inputName) {\n  promiseForm[inputName].style.outline = '1px solid red';\n}\n\n//removes all red outlines from input fields\nfunction removeAllRedOutlines() {\n  [...promiseForm.elements].forEach(el => {\n    if (el.nodeName === 'INPUT') {\n      el.style.outline = 'none';\n    }\n  });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      // Fulfill\n      console.log('true ', { position, delay });\n      setTimeout(() => resolve({ position, delay }), delay);\n    } else {\n      // Reject\n      console.log('false ', { position, delay });\n      setTimeout(() => reject({ position, delay }), delay);\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$promiseSetup","delay","step","amount","$47d4ff9957288465$var$promiseForm","document","querySelector","$47d4ff9957288465$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","console","log","setTimeout","Object","keys","length","promiseSetupParsed","JSON","parse","localStorage","getItem","error","forEach","key","elements","value","$47d4ff9957288465$var$setInputsFromLocalStorage","addEventListener","target","name","parseInt","obj","setItem","stringify","$47d4ff9957288465$var$writeToLocalStorage","event","preventDefault","passed","Boolean","style","outline","$47d4ff9957288465$var$checkInputs","Notify","failure","el","nodeName","removeItem","reset","timeout","init","i","then","success","catch"],"version":3,"file":"03-promises.f7e92be8.js.map"}